--------------------------------------------------------------------------------
-- Project :
 Trabalho II - Arquitetura de Computadores
-- File    :
-- Autor   :
 Maria Victoria França, Guilherme Hu, Gabriel Schmitz, Bernardo Pozzato, Luís Costa
-- Date    :
--
--------------------------------------------------------------------------------
-- Description :
--
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY Somador_Subtrator_Vetorial IS
  PORT (
    ------------------------------------------------------------------------------
  --INPUTS:
  
    A_i        : IN  STD_LOGIC_VECTOR(31 downto 0); 						-- Entrada A 
    B_i        : IN  STD_LOGIC_VECTOR(31 downto 0); 						-- Entrada B 
    mode_i 	: IN  STD_LOGIC; 								-- Modo (Adição ou Subtração)
    vecSize_i  : IN  STD_LOGIC_VECTOR(1 downto 0); 						-- Tamanho do vetor

  ------------------------------------------------------------------------------
  --OUTPUTS:
  
    S_o        : OUT STD_LOGIC_VECTOR(31 downto 0));  						-- Resultado/Saída
    
END Somador_Subtrator_Vetorial;

ARCHITECTURE TypeArchitecture OF Somador_Subtrator_Vetorial IS

 
SIGNAL B_FINAL : STD_LOGIC_VECTOR(31 downto 0);                           -- Vetor auxiliar para Subtração
SIGNAL G_CARRY : STD_LOGIC_VECTOR(31 downto 0);                           -- Vetor auxiliar do Carry (Generate)
SIGNAL P_CARRY : STD_LOGIC_VECTOR(31 downto 0);                           -- Vetor auxiliar do Carry (Propagate)
SIGNAL CARRY   : STD_LOGIC_VECTOR(31 downto 0);                           -- Vetor de Carrys Antecipados

BEGIN

-- Complemento de 2 para Subtração

B_FINAL <= B_i when (mode_i = '0') else						-- Adição
	   not(B_i) when (mode_i = '1');                			-- Subtração

-- Posteriormente, no caso da subtração, adicionaremos o Carry como '1', a fim de completar o complemento a 2.
		       

--Gerando os auxiliares de Carry

CARRYLOOKAHEAD: for ii in 0 to 31 generate

G_CARRY(ii) <= (A_i(ii) AND B_FINAL(ii)); 
P_CARRY(ii) <= (A_i(ii) OR B_FINAL(ii)); 

end generate CARRYLOOKAHEAD;

-- Determinando os Carrys

CARRY(0) <= '0' when (mode_i = '0') else '1' when (mode_i = '1'); 
CARRY(1) <= (G_CARRY(0) OR (P_CARRY(0) AND CARRY(0)));
CARRY(2) <= (G_CARRY(1) OR (P_CARRY(1) AND CARRY(1)));
CARRY(3) <= (G_CARRY(2) OR (P_CARRY(2) AND CARRY(2)));
CARRY(4) <= '0' when ((vecSize_i = "00") and (mode_i = '0')) else 
	    '1' when ((vecSize_i = "00") and (mode_i = '1')) else
	    (G_CARRY(3) OR (P_CARRY(3) AND CARRY(3)));
CARRY(5) <= (G_CARRY(4) OR (P_CARRY(4) AND CARRY(4)));
CARRY(6) <= (G_CARRY(5) OR (P_CARRY(5) AND CARRY(5)));
CARRY(7) <= (G_CARRY(6) OR (P_CARRY(6) AND CARRY(6)));
CARRY(8) <= '0' when ((vecSize_i = "00") and (mode_i = '0')) else
	    '0' when ((vecSize_i = "01") and (mode_i = '0')) else 
	    '1' when ((vecSize_i = "00") and (mode_i = '1')) else
            '1' when ((vecSize_i = "01") and (mode_i = '1')) else
	    (G_CARRY(7) OR (P_CARRY(7) AND CARRY(7)));
CARRY(9) <= (G_CARRY(8) OR (P_CARRY(8) AND CARRY(8)));
CARRY(10) <= (G_CARRY(9) OR (P_CARRY(9) AND CARRY(9)));
CARRY(11) <= (G_CARRY(10) OR (P_CARRY(10) AND CARRY(10)));
CARRY(12) <= '0' when ((vecSize_i = "00") and (mode_i = '0')) else 
	     '1' when ((vecSize_i = "00") and (mode_i = '1')) else 
	     (G_CARRY(11) OR (P_CARRY(11) AND CARRY(11)));
CARRY(13) <= (G_CARRY(12) OR (P_CARRY(12) AND CARRY(12)));
CARRY(14) <= (G_CARRY(13) OR (P_CARRY(13) AND CARRY(13)));
CARRY(15) <= (G_CARRY(14) OR (P_CARRY(14) AND CARRY(14)));
CARRY(16) <= '0' when ((vecSize_i = "00") and (mode_i = '0')) else
	     '0' when ((vecSize_i = "01") and (mode_i = '0')) else
	     '0' when ((vecSize_i = "10") and (mode_i = '0')) else
	     '1' when ((vecSize_i = "00") and (mode_i = '1')) else
	     '1' when ((vecSize_i = "01") and (mode_i = '1')) else
	     '1' when ((vecSize_i = "10") and (mode_i = '1')) else
	     (G_CARRY(15) OR (P_CARRY(15) AND CARRY(15)));
CARRY(17) <= (G_CARRY(16) OR (P_CARRY(16) AND CARRY(16)));
CARRY(18) <= (G_CARRY(17) OR (P_CARRY(17) AND CARRY(17)));
CARRY(19) <= (G_CARRY(18) OR (P_CARRY(18) AND CARRY(18)));
CARRY(20) <= '0' when ((vecSize_i = "00") and (mode_i = '0')) else 
	     '1' when ((vecSize_i = "00") and (mode_i = '1')) else
	     (G_CARRY(19) OR (P_CARRY(19) AND CARRY(19)));
CARRY(21) <= (G_CARRY(20) OR (P_CARRY(20) AND CARRY(20)));
CARRY(22) <= (G_CARRY(21) OR (P_CARRY(21) AND CARRY(21)));
CARRY(23) <= (G_CARRY(22) OR (P_CARRY(22) AND CARRY(22)));
CARRY(24) <= '0' when ((vecSize_i = "00") and (mode_i = '0')) else
	     '0' when ((vecSize_i = "01") and (mode_i = '0')) else 
             '1' when ((vecSize_i = "00") and (mode_i = '1')) else
	     '1' when ((vecSize_i = "01") and (mode_i = '1')) else
	     (G_CARRY(23) OR (P_CARRY(23) AND CARRY(23)));
CARRY(25) <= (G_CARRY(24) OR (P_CARRY(24) AND CARRY(24)));
CARRY(26) <= (G_CARRY(25) OR (P_CARRY(25) AND CARRY(25)));
CARRY(27) <= (G_CARRY(26) OR (P_CARRY(26) AND CARRY(26)));
CARRY(28) <= '0' when ((vecSize_i = "00") and (mode_i = '0')) else 
	     '1' when ((vecSize_i = "00") and (mode_i = '1')) else
	     (G_CARRY(27) OR (P_CARRY(27) AND CARRY(27)));
CARRY(29) <= (G_CARRY(28) OR (P_CARRY(28) AND CARRY(28)));
CARRY(30) <= (G_CARRY(29) OR (P_CARRY(29) AND CARRY(29)));
CARRY(31) <= (G_CARRY(30) OR (P_CARRY(30) AND CARRY(30)));

-- Fazendo a Soma

SOMA: for jj in 0 to 31 generate

S_o (jj) <= (A_i(jj) XOR B_FINAL(jj) XOR CARRY(jj));

end generate SOMA;

END TypeArchitecture;
